GSS_cleaned$SEX <- factor(GSS_cleaned$SEX,
levels = c(1, 2),
labels = c("Maschio", "Femmina"))
# ABRAPE: pena per stupro
GSS_cleaned$ABRAPE <- factor(GSS_cleaned$ABRAPE,
levels = c(1, 2),
labels = c("Favorevole", "Contrario"))
# CONFINAN: fiducia nel governo
GSS_cleaned$CONFINAN <- factor(GSS_cleaned$CONFINAN,
levels = c(1, 2, 3),
labels = c("Fiducioso", "Neutrale", "Scettico"))
# SATJOB: soddisfazione per il lavoro
GSS_cleaned$SATJOB <- factor(GSS_cleaned$SATJOB,
levels = c(1, 2, 3),
labels = c("Soddisfatto",
"Neutrale",
"Insoddisfatto"))
#Visualizzazione del DS dopo la fattorizzazione
str(GSS_cleaned)
backgnd_vars <- c("SEX", "SATJOB", "CONFINAN")
target_vars <- c("CAPPUN", "GUNLAW", "ABRAPE")
blacklist <- expand.grid(from = target_vars, to = backgnd_vars)
target_model_bn <- hc(GSS_cleaned, blacklist = blacklist)
library(Rgraphviz)
plot(test, type="distribution")
bn_fit <- bn.fit(target_model_bn, data=GSS_cleaned)
#Immissione in un oggetto grain
bn_grain <- as.grain(bn_fit)
#Interrogazione della rete
#Marginali
querygrain(bn_grain, nodes = "CAPPUN", type="marginal")
#Condizionate
test<-querygrain(bn_grain, nodes = c("CAPPUN", "SEX"), type="conditional")
#Congiunta
querygrain(bn_grain, nodes = c("CONFINAN", "SATJOB"), type="joint")
plot(test, type="distribution")
test <- compile(test)
bn_grain <- compile(bn_grain)
bn_grain <- propagate(bn_grain)
plot(bn_grain, type="distribution")
plot(bn_grain, type="distribution")
library(Rgraphviz)
version
install.packages("BiocManager")
BiocManager::install("Rgraphviz")
load("GSS.RData")
# Visualizzazione delle variabili contenute nel DS
# insieme al sommario statistico
summary(GSS)
#Visualizzazione dela struttura del DS
str(GSS)
#Eliminazione dei valori mancanti/non validi
GSS_cleaned <- na.omit(GSS)
#Visualizzazione del DS pulito
str(GSS_cleaned)
#Trasformazione delle variabili in fattori
#con etichette per migliorare la leggibilità
#CAPPUN
GSS_cleaned$CAPPUN <- factor(GSS_cleaned$CAPPUN,
levels = c(1, 2),
labels = c("Favorevole", "Contrario"))
# GUNLAW
GSS_cleaned$GUNLAW <- factor(GSS_cleaned$GUNLAW,
levels = c(1, 2),
labels = c("Favorevole", "Contrario"))
# SEX
GSS_cleaned$SEX <- factor(GSS_cleaned$SEX,
levels = c(1, 2),
labels = c("Maschio", "Femmina"))
# ABRAPE: pena per stupro
GSS_cleaned$ABRAPE <- factor(GSS_cleaned$ABRAPE,
levels = c(1, 2),
labels = c("Favorevole", "Contrario"))
# CONFINAN: fiducia nel governo
GSS_cleaned$CONFINAN <- factor(GSS_cleaned$CONFINAN,
levels = c(1, 2, 3),
labels = c("Fiducioso", "Neutrale", "Scettico"))
# SATJOB: soddisfazione per il lavoro
GSS_cleaned$SATJOB <- factor(GSS_cleaned$SATJOB,
levels = c(1, 2, 3),
labels = c("Soddisfatto",
"Neutrale",
"Insoddisfatto"))
#Visualizzazione del DS dopo la fattorizzazione
str(GSS_cleaned)
library(gRim)
library(gRain)
library(gRbase)
library(bnlearn)
#Grafi diretti - Reti bayesiane
install.packages("bnlearn")
library(Rgraphviz)
bn_fit <- bn.fit(target_model_bn, data=GSS_cleaned)
library(bnlearn)
#Grafi diretti - Reti bayesiane
install.packages("bnlearn")
# Per installare una versione specifica (es. 4.9), usa:
install.packages("https://cran.r-project.org/src/contrib/Archive/bnlearn/bnlearn_4.9.tar.gz", repos = NULL, type = "source")
library(bnlearn)
library(Rgraphviz)
library(bnlearn)
library(igraph)
bn_fit <- bn.fit(target_model_bn, data=GSS_cleaned)
#Immissione in un oggetto grain
bn_grain <- as.grain(bn_fit)
#Interrogazione della rete
#Marginali
querygrain(bn_grain, nodes = "CAPPUN", type="marginal")
library(gRim)
library(gRain)
library(gRbase)
bn_fit <- bn.fit(target_model_bn, data=GSS_cleaned)
#Immissione in un oggetto grain
bn_grain <- as.grain(bn_fit)
#Interrogazione della rete
#Marginali
querygrain(bn_grain, nodes = "CAPPUN", type="marginal")
#Condizionate
querygrain(bn_grain, nodes = c("CAPPUN", "SEX"), type="conditional")
#Congiunta
querygrain(bn_grain, nodes = c("CONFINAN", "SATJOB"), type="joint")
bn_grain <- compile(bn_grain)
bn_grain <- propagate(bn_grain)
plot(bn_grain, type="distribution")
graphviz.plot(bn_grain, type="distribution")
graphviz.plot(bn_grain)
graphviz.plot(bn_fit)
graphviz.plot(bn_fit)
graphviz.plot(bn_fit, type="distribution")
library(bnlearn)
library(igraph)
library(grid)
library(png)
install.packages("png")
library(bnlearn)
library(igraph)
library(bnlearn)
library(igraph)
library(grid)
library(png)
# Esempio: modello fit già fatto (modifica con il tuo oggetto bn_fit)
# bn_fit <- bn.fit(target_model_bn, data=GSS_cleaned)
# Trasforma bn.fit in DAG igraph
dag_igraph <- as.igraph(target_model_bn)
# Ottieni le probabilità marginali per ogni nodo da bn_fit
get_node_probs <- function(node) {
probs <- bn_fit[[node]]$prob
if (is.table(probs)) {
return(as.numeric(probs))
} else {
return(NULL) # Se nodo non categoriale o problema
}
}
# Funzione che crea un file PNG temporaneo con barplot per un nodo
create_barplot_png <- function(probs, node_name) {
if (is.null(probs)) return(NULL)
tmpfile <- tempfile(fileext = ".png")
png(tmpfile, width=200, height=150, bg="transparent")
barplot(probs, main=node_name, col="skyblue", las=2, cex.names=0.7)
dev.off()
return(tmpfile)
}
# Per ogni nodo crea la mini-immagine barplot
node_images <- sapply(V(dag_igraph)$name, function(n) {
probs <- get_node_probs(n)
create_barplot_png(probs, n)
})
# Plot igraph con immagini nei nodi
plot_dag_with_barplots <- function(graph, images) {
plot(graph, vertex.size=50, vertex.label=NA, edge.arrow.size=0.5)
coords <- layout_with_fr(graph)
for (i in seq_along(V(graph))) {
img <- images[i]
if (!is.null(img)) {
raster <- readPNG(img)
raster <- as.raster(raster)
# Inserisci immagine sopra il nodo
rasterImage(raster,
xleft = coords[i,1]-0.1,
ybottom = coords[i,2]-0.1,
xright = coords[i,1]+0.1,
ytop = coords[i,2]+0.1)
}
}
# Rimettere etichette (opzionale)
text(coords[,1], coords[,2], labels=V(graph)$name, cex=0.8, pos=3)
}
# Usa la funzione per visualizzare
plot_dag_with_barplots(dag_igraph, node_images)
# Usa la funzione per visualizzare
plot_dag_with_barplots(dag_igraph, node_images)
graphviz.chart(bn_fit)
graphviz.chart(bn_fit,
type = "barprob",
bar.col = "red",
)
graphviz.chart(bn_fit,
type = "pie",
bar.col = "red",
)
graphviz.chart(bn_fit,
type = "pieprob",
bar.col = "red",
)
graphviz.chart(bn_fit,
type = "barprob",
bar.col = "red",
)
graphviz.chart(bn_fit,
type = "barprob",
bar.col = "red",
layout = "fdp"
)
graphviz.chart(bn_fit,
type = "barprob",
bar.col = "red",
layout = "fdp"
)
graphviz.chart(bn_fit,
type = "barprob",
bar.col = "red",
layout = "neato"
)
graphviz.chart(bn_fit,
type = "barprob",
bar.col = "red",
)
graphviz.chart(bn_fit,
type = "barprob",
bar.col = "red",
edgeAttrs = list(penwidth=2)
)
graphviz.chart(bn_fit,
type = "barprob",
bar.col = "red",
edgeAttrs = list(penwidth=2),
grid = true
)
graphviz.chart(bn_fit,
type = "barprob",
bar.col = "red",
edgeAttrs = list(penwidth=2),
grid =TRUE
)
graphviz.chart(bn_fit,
type = "barprob",
bar.col = "red",
edgeAttrs = list(penwidth=2),
grid = TRUE
)
graphviz.chart(bn_fit,
type = "barprob",
bar.col = "red",
grid = TRUE
)
graphviz.chart(bn_fit,
type = "barprob",
bar.col = "red",
strip.bg = "yellow"
)
graphviz.chart(bn_fit,
type = "barprob",
bar.col = "cornflowerblue",
)
graphviz.chart(bn_fit,
type = "barprob",
bar.col = "brown4",
)
bn_evid_sex <- setEvidence(bn_grain, nodes="SEX", states = "Maschio")
graphviz.chart(bn_evid_sex,
type = "barprob",
bar.col = "mediumorchid3",
)
bn_evid_sex <- setEvidence(bn_grain, nodes = "SEX", states = "Maschio")
graphviz.chart(bn_evid_sex,
type = "barprob",
bar.col = "mediumorchid3"
)
bn_grain <- compile(bn_grain)
bn_evid_sex <- setEvidence(bn_grain, nodes = "SEX", states = "Maschio")
graphviz.chart(bn_evid_sex,
type = "barprob",
bar.col = "mediumorchid3"
)
bn_grain <- compile(bn_grain)
bn_grain <- setEvidence(bn_grain, nodes = "SEX", states = "Maschio")
graphviz.chart(bn_grain,
type = "barprob",
bar.col = "mediumorchid3"
)
GSS_male <- subset(GSS_cleaned, SEX == "Maschio")
bn_fit_male <- bn.fit(target_model_bn, data = GSS_male)
graphviz.chart(bn_fit_male,
type = "barprob",
bar.col = "mediumorchid3"
)
GSS_female <- subset(GSS_cleaned, SEX == "Femmina")
bn_fit_female <- bn.fit(target_model_bn, data = GSS_female)
graphviz.chart(bn_fit_female,
type = "barprob",
bar.col = "mediumorchid3"
)
graphviz.chart(bn_fit_male,
type = "barprob",
bar.col = "sienna3"
)
graphviz.chart(bn_fit_female,
type = "barprob",
bar.col = "mediumorchid3"
)
GSS_cappun_F <- subset(GSS_cleaned, CAPPUN == "Favorevole")
bn_fit_cappun_F <- bn.fit(target_model_bn, data = GSS_cappun_F)
GSS_cappun_C <- subset(GSS_cleaned, CAPPUN == "Contrario")
bn_fit_cappun_C <- bn.fit(target_model_bn, data = GSS_cappun_C)
graphviz.chart(bn_fit_cappun_F,
type = "barprob",
bar.col = "springgreen2"
)
graphviz.chart(bn_fit_cappun_C,
type = "barprob",
bar.col = "royalblue3"
)
GSS_cappun_F <- subset(GSS_cleaned, CAPPUN == "Favorevole")
bn_fit_cappun_F <- bn.fit(target_model_bn, data = GSS_cappun_F)
GSS_cappun_C <- subset(GSS_cleaned, CAPPUN == "Contrario")
bn_fit_cappun_C <- bn.fit(target_model_bn, data = GSS_cappun_C)
graphviz.chart(bn_fit_cappun_F,
type = "barprob",
bar.col = "springgreen3"
)
graphviz.chart(bn_fit_cappun_C,
type = "barprob",
bar.col = "royalblue3"
)
GSS_abrape_F <- subset(GSS_cleaned, ABRAPE == "Favorevole")
bn_fit_abrape_F <- bn.fit(target_model_bn, data = GSS_abrape_F)
GSS_abrape_C <- subset(GSS_cleaned, ABRAPE == "Contrario")
bn_fit_abrape_C <- bn.fit(target_model_bn, data = GSS_abrape_C)
graphviz.chart(bn_fit_abrape_F,
type = "barprob",
bar.col = "purple3"
)
graphviz.chart(bn_fit_abrape_C,
type = "barprob",
bar.col = "moccasin"
)
GSS_abrape_F <- subset(GSS_cleaned, ABRAPE == "Favorevole")
bn_fit_abrape_F <- bn.fit(target_model_bn, data = GSS_abrape_F)
GSS_abrape_C <- subset(GSS_cleaned, ABRAPE == "Contrario")
bn_fit_abrape_C <- bn.fit(target_model_bn, data = GSS_abrape_C)
graphviz.chart(bn_fit_abrape_F,
type = "barprob",
bar.col = "purple3"
)
graphviz.chart(bn_fit_abrape_C,
type = "barprob",
bar.col = "hotpink"
)
GSS_cappun_F_SEX_M <- subset(GSS_cleaned, CAPPUN == "Favorevole", SEX == "Maschio")
bn_fit_cappun_F_SEX_M <- bn.fit(target_model_bn, data = GSS_cappun_F_SEX_M)
GSS_cappun_F_SEX_M <- subset(GSS_cleaned, CAPPUN == "Favorevole" & SEX == "Maschio")
bn_fit_cappun_F_SEX_M <- bn.fit(target_model_bn, data = GSS_cappun_F_SEX_M)
graphviz.chart(bn_fit_cappun_F_SEX_M,
type = "barprob",
bar.col = "orange1"
)
GSS_cappun_F_SEX_M <- subset(GSS_cleaned, CAPPUN == "Favorevole" & SEX == "Maschio")
bn_fit_cappun_F_SEX_M <- bn.fit(target_model_bn, data = GSS_cappun_F_SEX_M)
graphviz.chart(bn_fit_cappun_F_SEX_M,
type = "barprob",
bar.col = "orangered1"
)
GSS_cappun_F_SEX_F <- subset(GSS_cleaned, CAPPUN == "Favorevole" & SEX == "Femmina")
bn_fit_cappun_F_SEX_M <- bn.fit(target_model_bn, data = GSS_cappun_F_SEX_F)
graphviz.chart(GSS_cappun_F_SEX_F,
type = "barprob",
bar.col = "mediumpurple2"
)GSS_cappun_C_SEX_M <- subset(GSS_cleaned, CAPPUN == "Contraio" & SEX == "Maschio")
GSS_cappun_F_SEX_M <- subset(GSS_cleaned, CAPPUN == "Favorevole" & SEX == "Maschio")
bn_fit_cappun_F_SEX_M <- bn.fit(target_model_bn, data = GSS_cappun_F_SEX_M)
graphviz.chart(bn_fit_cappun_F_SEX_M,
type = "barprob",
bar.col = "orangered1"
)
GSS_cappun_F_SEX_F <- subset(GSS_cleaned, CAPPUN == "Favorevole" & SEX == "Femmina")
bn_fit_cappun_F_SEX_M <- bn.fit(target_model_bn, data = GSS_cappun_F_SEX_F)
graphviz.chart(GSS_cappun_F_SEX_F,
type = "barprob",
bar.col = "purple2"
)GSS_cappun_C_SEX_M <- subset(GSS_cleaned, CAPPUN == "Contraio" & SEX == "Maschio")
GSS_cappun_F_SEX_M <- subset(GSS_cleaned, CAPPUN == "Favorevole" & SEX == "Maschio")
bn_fit_cappun_F_SEX_M <- bn.fit(target_model_bn, data = GSS_cappun_F_SEX_M)
graphviz.chart(bn_fit_cappun_F_SEX_M,
type = "barprob",
bar.col = "orangered1"
)
GSS_cappun_F_SEX_F <- subset(GSS_cleaned, CAPPUN == "Favorevole" & SEX == "Femmina")
bn_fit_cappun_F_SEX_M <- bn.fit(target_model_bn, data = GSS_cappun_F_SEX_F)
graphviz.chart(GSS_cappun_F_SEX_F,
type = "barprob",
bar.col = "purple2"
)
GSS_cappun_F_SEX_M <- subset(GSS_cleaned, CAPPUN == "Favorevole" & SEX == "Maschio")
bn_fit_cappun_F_SEX_M <- bn.fit(target_model_bn, data = GSS_cappun_F_SEX_M)
graphviz.chart(bn_fit_cappun_F_SEX_M,
type = "barprob",
bar.col = "orangered1"
)
GSS_cappun_F_SEX_F <- subset(GSS_cleaned, CAPPUN == "Favorevole" & SEX == "Femmina")
bn_fit_cappun_F_SEX_F <- bn.fit(target_model_bn, data = GSS_cappun_F_SEX_F)
graphviz.chart(bn_fit_cappun_F_SEX_F,
type = "barprob",
bar.col = "purple2"
)
GSS_cappun_C_SEX_M <- subset(GSS_cleaned, CAPPUN == "Contraio" & SEX == "Maschio")
bn_fit_cappun_C_SEX_M <- bn.fit(target_model_bn, data = GSS_cappun_F_SEX_M)
graphviz.chart(bn_fit_cappun_C_SEX_M,
type = "barprob",
bar.col = "magenta2"
)
GSS_cappun_C_SEX_F <- subset(GSS_cleaned, CAPPUN == "Contraio" & SEX == "Femmina")
bn_fit_cappun_C_SEX_M <- bn.fit(target_model_bn, data = GSS_cappun_F_SEX_M)
graphviz.chart(bn_fit_cappun_C_SEX_M,
type = "barprob",
bar.col = "forestgreen"
)
GSS_cappun_F_SEX_M <- subset(GSS_cleaned, CAPPUN == "Favorevole" & SEX == "Maschio")
bn_fit_cappun_F_SEX_M <- bn.fit(target_model_bn, data = GSS_cappun_F_SEX_M)
graphviz.chart(bn_fit_cappun_F_SEX_M,
type = "barprob",
bar.col = "orangered1"
)
GSS_cappun_F_SEX_F <- subset(GSS_cleaned, CAPPUN == "Favorevole" & SEX == "Femmina")
bn_fit_cappun_F_SEX_F <- bn.fit(target_model_bn, data = GSS_cappun_F_SEX_F)
graphviz.chart(bn_fit_cappun_F_SEX_F,
type = "barprob",
bar.col = "purple2"
)
GSS_cappun_C_SEX_M <- subset(GSS_cleaned, CAPPUN == "Contraio" & SEX == "Maschio")
bn_fit_cappun_C_SEX_M <- bn.fit(target_model_bn, data = GSS_cappun_C_SEX_M)
GSS_cappun_F_SEX_M <- subset(GSS_cleaned, CAPPUN == "Favorevole" & SEX == "Maschio")
bn_fit_cappun_F_SEX_M <- bn.fit(target_model_bn, data = GSS_cappun_F_SEX_M)
graphviz.chart(bn_fit_cappun_F_SEX_M,
type = "barprob",
bar.col = "orangered1"
)
GSS_cappun_F_SEX_F <- subset(GSS_cleaned, CAPPUN == "Favorevole" & SEX == "Femmina")
bn_fit_cappun_F_SEX_F <- bn.fit(target_model_bn, data = GSS_cappun_F_SEX_F)
graphviz.chart(bn_fit_cappun_F_SEX_F,
type = "barprob",
bar.col = "purple2"
)
GSS_cappun_C_SEX_M <- subset(GSS_cleaned, CAPPUN == "Contraio" & SEX == "Maschio")
bn_fit_cappun_C_SEX_M <- bn.fit(target_model_bn, data = GSS_cappun_C_SEX_M)
GSS_cappun_F_SEX_M <- subset(GSS_cleaned, CAPPUN == "Favorevole" & SEX == "Maschio")
bn_fit_cappun_F_SEX_M <- bn.fit(target_model_bn, data = GSS_cappun_F_SEX_M)
graphviz.chart(bn_fit_cappun_F_SEX_M,
type = "barprob",
bar.col = "orangered1"
)
GSS_cappun_F_SEX_F <- subset(GSS_cleaned, CAPPUN == "Favorevole" & SEX == "Femmina")
bn_fit_cappun_F_SEX_F <- bn.fit(target_model_bn, data = GSS_cappun_F_SEX_F)
graphviz.chart(bn_fit_cappun_F_SEX_F,
type = "barprob",
bar.col = "purple2"
)
GSS_cappun_C_SEX_M <- subset(GSS_cleaned, CAPPUN == "Contraio" & SEX == "Maschio")
bn_fit_cappun_C_SEX_M <- bn.fit(target_model_bn, data = GSS_cappun_C_SEX_M)
GSS_cappun_C_SEX_M <- subset(GSS_cleaned, CAPPUN == "Contraio" & SEX == "Maschio")
GSS_cappun_F_SEX_M <- subset(GSS_cleaned, CAPPUN == "Favorevole" & SEX == "Maschio")
bn_fit_cappun_F_SEX_M <- bn.fit(target_model_bn, data = GSS_cappun_F_SEX_M)
graphviz.chart(bn_fit_cappun_F_SEX_M,
type = "barprob",
bar.col = "orangered1"
)
GSS_cappun_F_SEX_F <- subset(GSS_cleaned, CAPPUN == "Favorevole" & SEX == "Femmina")
bn_fit_cappun_F_SEX_F <- bn.fit(target_model_bn, data = GSS_cappun_F_SEX_F)
graphviz.chart(bn_fit_cappun_F_SEX_F,
type = "barprob",
bar.col = "purple2"
)
GSS_cappun_C_SEX_M <- subset(GSS_cleaned, CAPPUN == "Contrario" & SEX == "Maschio")
bn_fit_cappun_C_SEX_M <- bn.fit(target_model_bn, data = GSS_cappun_C_SEX_M)
graphviz.chart(bn_fit_cappun_C_SEX_M,
type = "barprob",
bar.col = "magenta2"
)
GSS_cappun_C_SEX_F <- subset(GSS_cleaned, CAPPUN == "Contrario" & SEX == "Femmina")
bn_fit_cappun_C_SEX_F <- bn.fit(target_model_bn, data = GSS_cappun_C_SEX_F)
graphviz.chart(bn_fit_cappun_C_SEX_F,
type = "barprob",
bar.col = "forestgreen"
)
null_model <- glm(GUNLAW ~.^1, data = GSS_cleaned, family = binomial)
null_model <- glm(GUNLAW ~.^1, data = GSS_cleaned, family = binomial)
null_model <- glm(GUNLAW ~ 1, data = GSS_cleaned, family = binomial)
full_model <- glm(GUNLAW ~.^2, data = GSS_cleaned, family = binomial)
scope <- list(lower=formula(null_model), upper = formula(full_model))
back_model_AIC <- step(full_model, scope = scope, direction = "backward", k = 2, trace = TRUE)
summary(back_model_AIC)
back_model_BIC <- step(full_model, scope = scope, direction = "backward", k = log(nrwo(GSS_cleaned)))
#Per il metodo BIC utilizziamo k = log(n)
back_model_BIC <- step(full_model, scope = scope, direction = "backward", k = log(nrow(GSS_cleaned)))
summary(back_model_BIC)
forward_model_AIC <- step(null_model, scope = scope, direction = "forward", k = 2)
summary(forward_model_AIC)
forward_model_BIC <- step(null_model, scope = scope, direction = "forward", k = log(nrow(GSS_cleaned)))
summary(forward_model_BIC)
both_model_AIC <- step(null_model, scope = scope, direction = "both", k = 2)
summary(both_model_AIC)
both_model_BIC <- step(null_model, scope = scope, direction = "both", k = log(nrow(GSS_cleaned)))
summary(both_model_BIC)
